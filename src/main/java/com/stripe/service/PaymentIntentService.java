// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.service;

import com.stripe.exception.StripeException;
import com.stripe.model.PaymentIntent;
import com.stripe.model.PaymentIntentCollection;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.RequestOptions;
import com.stripe.param.PaymentIntentCancelParams;
import com.stripe.param.PaymentIntentCaptureParams;
import com.stripe.param.PaymentIntentConfirmParams;
import com.stripe.param.PaymentIntentCreateParams;
import com.stripe.param.PaymentIntentListParams;
import com.stripe.param.PaymentIntentRetrieveParams;
import com.stripe.param.PaymentIntentUpdateParams;

public class PaymentIntentService extends ApiService {
  /**
   * A PaymentIntent object can be canceled when it is in one of these statuses: <code>
   * requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation
   * </code>, <code>requires_action</code>.
   *
   * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on
   * the PaymentIntent will fail with an error. For PaymentIntents with <code>
   * status='requires_capture'</code>, the remaining <code>amount_capturable</code> will
   * automatically be refunded.
   */
  public PaymentIntent cancel(String id, PaymentIntentCancelParams params) throws StripeException {
    return cancel(id, params, (RequestOptions) null);
  }

  /**
   * A PaymentIntent object can be canceled when it is in one of these statuses: <code>
   * requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation
   * </code>, <code>requires_action</code>.
   *
   * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on
   * the PaymentIntent will fail with an error. For PaymentIntents with <code>
   * status='requires_capture'</code>, the remaining <code>amount_capturable</code> will
   * automatically be refunded.
   */
  public PaymentIntent cancel(String id, PaymentIntentCancelParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/payment_intents/%s/cancel", id);
    return request(ApiResource.RequestMethod.POST, url, params, PaymentIntent.class, options);
  }

  /**
   * Confirm that your customer intends to pay with current or provided payment method. Upon
   * confirmation, the PaymentIntent will attempt to initiate a payment.
   *
   * <p>If the selected payment method requires additional authentication steps, the PaymentIntent
   * will transition to the <code>requires_action</code> status and suggest additional actions via
   * <code>next_action</code>. If payment fails, the PaymentIntent will transition to the <code>
   * requires_payment_method</code> status. If payment succeeds, the PaymentIntent will transition
   * to the <code>succeeded</code> status (or <code>requires_capture</code>, if <code>capture_method
   * </code> is set to <code>manual</code>). Read the <a
   * href="/docs/payments/payment-intents/server-confirmation">expanded documentation</a> to learn
   * more about server-side confirmation.
   *
   * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
   * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a> and
   * the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>. After
   * <code>next_action</code>s are handled by the client, no additional confirmation is required to
   * complete the payment.
   *
   * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
   * initiated using a secret key. If any actions are required for the payment, the PaymentIntent
   * will return to the <code>requires_confirmation</code> state after those actions are completed.
   * Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment
   * attempt.
   */
  public PaymentIntent confirm(String id, PaymentIntentConfirmParams params)
      throws StripeException {
    return confirm(id, params, (RequestOptions) null);
  }

  /**
   * Confirm that your customer intends to pay with current or provided payment method. Upon
   * confirmation, the PaymentIntent will attempt to initiate a payment.
   *
   * <p>If the selected payment method requires additional authentication steps, the PaymentIntent
   * will transition to the <code>requires_action</code> status and suggest additional actions via
   * <code>next_action</code>. If payment fails, the PaymentIntent will transition to the <code>
   * requires_payment_method</code> status. If payment succeeds, the PaymentIntent will transition
   * to the <code>succeeded</code> status (or <code>requires_capture</code>, if <code>capture_method
   * </code> is set to <code>manual</code>). Read the <a
   * href="/docs/payments/payment-intents/server-confirmation">expanded documentation</a> to learn
   * more about server-side confirmation.
   *
   * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
   * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a> and
   * the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>. After
   * <code>next_action</code>s are handled by the client, no additional confirmation is required to
   * complete the payment.
   *
   * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
   * initiated using a secret key. If any actions are required for the payment, the PaymentIntent
   * will return to the <code>requires_confirmation</code> state after those actions are completed.
   * Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment
   * attempt.
   */
  public PaymentIntent confirm(String id, PaymentIntentConfirmParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/payment_intents/%s/confirm", id);
    return request(ApiResource.RequestMethod.POST, url, params, PaymentIntent.class, options);
  }

  /**
   * Capture the funds of an existing uncaptured PaymentIntent when its status is <code>
   * requires_capture</code>.
   *
   * <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.
   *
   * <p>Read the <a
   * href="/docs/payments/payment-intents/creating-payment-intents#separate-auth-capture">expanded
   * documentation</a> to learn more about separate authorization and capture.
   */
  public PaymentIntent capture(String id, PaymentIntentCaptureParams params)
      throws StripeException {
    return capture(id, params, (RequestOptions) null);
  }

  /**
   * Capture the funds of an existing uncaptured PaymentIntent when its status is <code>
   * requires_capture</code>.
   *
   * <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.
   *
   * <p>Read the <a
   * href="/docs/payments/payment-intents/creating-payment-intents#separate-auth-capture">expanded
   * documentation</a> to learn more about separate authorization and capture.
   */
  public PaymentIntent capture(String id, PaymentIntentCaptureParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/payment_intents/%s/capture", id);
    return request(ApiResource.RequestMethod.POST, url, params, PaymentIntent.class, options);
  }

  /** Updates a PaymentIntent object. */
  public PaymentIntent update(String id, PaymentIntentUpdateParams params) throws StripeException {
    return update(id, params, (RequestOptions) null);
  }

  /** Updates a PaymentIntent object. */
  public PaymentIntent update(String id, PaymentIntentUpdateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/payment_intents/%s", id);
    return request(ApiResource.RequestMethod.POST, url, params, PaymentIntent.class, options);
  }

  /**
   * Retrieves the details of a PaymentIntent that has previously been created.
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code>
   * is provided in the query string.
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please
   * refer to the <a href="#payment_intent_object">payment intent</a> object reference for more
   * details.
   */
  public PaymentIntent retrieve(String intent, PaymentIntentRetrieveParams params)
      throws StripeException {
    return retrieve(intent, params, (RequestOptions) null);
  }

  /**
   * Retrieves the details of a PaymentIntent that has previously been created.
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code>
   * is provided in the query string.
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please
   * refer to the <a href="#payment_intent_object">payment intent</a> object reference for more
   * details.
   */
  public PaymentIntent retrieve(
      String intent, PaymentIntentRetrieveParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/payment_intents/%s", intent);
    return request(ApiResource.RequestMethod.GET, url, params, PaymentIntent.class, options);
  }

  /** Creates a PaymentIntent object. */
  public PaymentIntent create(PaymentIntentCreateParams params) throws StripeException {
    return create(params, (RequestOptions) null);
  }

  /** Creates a PaymentIntent object. */
  public PaymentIntent create(PaymentIntentCreateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/payment_intents");
    return request(ApiResource.RequestMethod.POST, url, params, PaymentIntent.class, options);
  }

  /** Returns a list of PaymentIntents. */
  public PaymentIntentCollection list(PaymentIntentListParams params) throws StripeException {
    return list(params, (RequestOptions) null);
  }

  /** Returns a list of PaymentIntents. */
  public PaymentIntentCollection list(PaymentIntentListParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/payment_intents");
    return requestCollection(url, params, PaymentIntentCollection.class, options);
  }
}
