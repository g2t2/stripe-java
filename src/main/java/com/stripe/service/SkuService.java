// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.service;

import com.stripe.exception.StripeException;
import com.stripe.model.Sku;
import com.stripe.model.SkuCollection;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.RequestOptions;
import com.stripe.param.SkuCreateParams;
import com.stripe.param.SkuDeleteParams;
import com.stripe.param.SkuListParams;
import com.stripe.param.SkuRetrieveParams;
import com.stripe.param.SkuUpdateParams;

public class SkuService extends ApiService {
  /** Creates a new SKU associated with a product. */
  public Sku create(SkuCreateParams params) throws StripeException {
    return create(params, (RequestOptions) null);
  }

  /** Creates a new SKU associated with a product. */
  public Sku create(SkuCreateParams params, RequestOptions options) throws StripeException {
    String url = resourceUrl("/v1/skus");
    return request(ApiResource.RequestMethod.POST, url, params, Sku.class, options);
  }

  /**
   * Updates the specific SKU by setting the values of the parameters passed. Any parameters not
   * provided will be left unchanged.
   *
   * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to
   * deactivate the existing SKU and create a new one with the new attribute values.
   */
  public Sku update(String id, SkuUpdateParams params) throws StripeException {
    return update(id, params, (RequestOptions) null);
  }

  /**
   * Updates the specific SKU by setting the values of the parameters passed. Any parameters not
   * provided will be left unchanged.
   *
   * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to
   * deactivate the existing SKU and create a new one with the new attribute values.
   */
  public Sku update(String id, SkuUpdateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/skus/%s", id);
    return request(ApiResource.RequestMethod.POST, url, params, Sku.class, options);
  }

  /**
   * Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU
   * creation request or from the product, and Stripe will return the corresponding SKU information.
   */
  public Sku retrieve(String id, SkuRetrieveParams params) throws StripeException {
    return retrieve(id, params, (RequestOptions) null);
  }

  /**
   * Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU
   * creation request or from the product, and Stripe will return the corresponding SKU information.
   */
  public Sku retrieve(String id, SkuRetrieveParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/skus/%s", id);
    return request(ApiResource.RequestMethod.GET, url, params, Sku.class, options);
  }

  /**
   * Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most
   * recently created SKUs appearing first.
   */
  public SkuCollection list(SkuListParams params) throws StripeException {
    return list(params, (RequestOptions) null);
  }

  /**
   * Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most
   * recently created SKUs appearing first.
   */
  public SkuCollection list(SkuListParams params, RequestOptions options) throws StripeException {
    String url = resourceUrl("/v1/skus");
    return requestCollection(url, params, SkuCollection.class, options);
  }

  /** Delete a SKU. Deleting a SKU is only possible until it has been used in an order. */
  public Sku delete(String id, SkuDeleteParams params) throws StripeException {
    return delete(id, params, (RequestOptions) null);
  }

  /** Delete a SKU. Deleting a SKU is only possible until it has been used in an order. */
  public Sku delete(String id, SkuDeleteParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/skus/%s", id);
    return request(ApiResource.RequestMethod.DELETE, url, params, Sku.class, options);
  }
}
