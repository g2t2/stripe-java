// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.service;

import com.stripe.exception.StripeException;
import com.stripe.model.Product;
import com.stripe.model.ProductCollection;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.RequestOptions;
import com.stripe.param.ProductCreateParams;
import com.stripe.param.ProductDeleteParams;
import com.stripe.param.ProductListParams;
import com.stripe.param.ProductRetrieveParams;
import com.stripe.param.ProductUpdateParams;

public class ProductService extends ApiService {
  /**
   * Updates the specific product by setting the values of the parameters passed. Any parameters not
   * provided will be left unchanged.
   *
   * <p>Note that a product’s <code>attributes</code> are not editable. Instead, you would need to
   * deactivate the existing product and create a new one with the new attribute values.
   */
  public Product update(String id, ProductUpdateParams params) throws StripeException {
    return update(id, params, (RequestOptions) null);
  }

  /**
   * Updates the specific product by setting the values of the parameters passed. Any parameters not
   * provided will be left unchanged.
   *
   * <p>Note that a product’s <code>attributes</code> are not editable. Instead, you would need to
   * deactivate the existing product and create a new one with the new attribute values.
   */
  public Product update(String id, ProductUpdateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/products/%s", id);
    return request(ApiResource.RequestMethod.POST, url, params, Product.class, options);
  }

  /**
   * Retrieves the details of an existing product. Supply the unique product ID from either a
   * product creation request or the product list, and Stripe will return the corresponding product
   * information.
   */
  public Product retrieve(String id, ProductRetrieveParams params) throws StripeException {
    return retrieve(id, params, (RequestOptions) null);
  }

  /**
   * Retrieves the details of an existing product. Supply the unique product ID from either a
   * product creation request or the product list, and Stripe will return the corresponding product
   * information.
   */
  public Product retrieve(String id, ProductRetrieveParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/products/%s", id);
    return request(ApiResource.RequestMethod.GET, url, params, Product.class, options);
  }

  /**
   * Creates a new product object. To create a product for use with subscriptions, see <a
   * href="#create_service_product">Subscriptions Products</a>.
   */
  public Product create(ProductCreateParams params) throws StripeException {
    return create(params, (RequestOptions) null);
  }

  /**
   * Creates a new product object. To create a product for use with subscriptions, see <a
   * href="#create_service_product">Subscriptions Products</a>.
   */
  public Product create(ProductCreateParams params, RequestOptions options) throws StripeException {
    String url = resourceUrl("/v1/products");
    return request(ApiResource.RequestMethod.POST, url, params, Product.class, options);
  }

  /**
   * Returns a list of your products. The products are returned sorted by creation date, with the
   * most recently created products appearing first.
   */
  public ProductCollection list(ProductListParams params) throws StripeException {
    return list(params, (RequestOptions) null);
  }

  /**
   * Returns a list of your products. The products are returned sorted by creation date, with the
   * most recently created products appearing first.
   */
  public ProductCollection list(ProductListParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/products");
    return requestCollection(url, params, ProductCollection.class, options);
  }

  /**
   * Delete a product. Deleting a product with type=<code>good</code> is only possible if it has no
   * SKUs associated with it. Deleting a product with type=<code>service</code> is only possible if
   * it has no plans associated with it.
   */
  public Product delete(String id, ProductDeleteParams params) throws StripeException {
    return delete(id, params, (RequestOptions) null);
  }

  /**
   * Delete a product. Deleting a product with type=<code>good</code> is only possible if it has no
   * SKUs associated with it. Deleting a product with type=<code>service</code> is only possible if
   * it has no plans associated with it.
   */
  public Product delete(String id, ProductDeleteParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/products/%s", id);
    return request(ApiResource.RequestMethod.DELETE, url, params, Product.class, options);
  }
}
