// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.service;

import com.stripe.exception.StripeException;
import com.stripe.model.SubscriptionSchedule;
import com.stripe.model.SubscriptionScheduleCollection;
import com.stripe.model.SubscriptionScheduleRevisionCollection;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.RequestOptions;
import com.stripe.param.SubscriptionScheduleCancelParams;
import com.stripe.param.SubscriptionScheduleCreateParams;
import com.stripe.param.SubscriptionScheduleListParams;
import com.stripe.param.SubscriptionScheduleReleaseParams;
import com.stripe.param.SubscriptionScheduleRetrieveParams;
import com.stripe.param.SubscriptionScheduleRevisionsParams;
import com.stripe.param.SubscriptionScheduleUpdateParams;

public class SubscriptionScheduleService extends ApiService {
  /**
   * Cancels a subscription schedule and its associated subscription immediately (if the
   * subscription schedule has an active subscription). A subscription schedule can only be canceled
   * if its status is <code>not_started</code> or <code>active</code>.
   */
  public SubscriptionSchedule cancel(String id, SubscriptionScheduleCancelParams params)
      throws StripeException {
    return cancel(id, params, (RequestOptions) null);
  }

  /**
   * Cancels a subscription schedule and its associated subscription immediately (if the
   * subscription schedule has an active subscription). A subscription schedule can only be canceled
   * if its status is <code>not_started</code> or <code>active</code>.
   */
  public SubscriptionSchedule cancel(
      String id, SubscriptionScheduleCancelParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_schedules/%s/cancel", id);
    return request(
        ApiResource.RequestMethod.POST, url, params, SubscriptionSchedule.class, options);
  }

  /**
   * Releases the subscription schedule immediately, which will stop scheduling of its phases, but
   * leave any existing subscription in place. A schedule can only be released if its status is
   * <code>not_started</code> or <code>active</code>. If the subscription schedule is currently
   * associated with a subscription, releasing it will remove its <code>subscription</code> property
   * and set the subscription’s ID to the <code>released_subscription</code> property.
   */
  public SubscriptionSchedule release(String id, SubscriptionScheduleReleaseParams params)
      throws StripeException {
    return release(id, params, (RequestOptions) null);
  }

  /**
   * Releases the subscription schedule immediately, which will stop scheduling of its phases, but
   * leave any existing subscription in place. A schedule can only be released if its status is
   * <code>not_started</code> or <code>active</code>. If the subscription schedule is currently
   * associated with a subscription, releasing it will remove its <code>subscription</code> property
   * and set the subscription’s ID to the <code>released_subscription</code> property.
   */
  public SubscriptionSchedule release(
      String id, SubscriptionScheduleReleaseParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_schedules/%s/release", id);
    return request(
        ApiResource.RequestMethod.POST, url, params, SubscriptionSchedule.class, options);
  }

  /** Updates an existing subscription schedule. */
  public SubscriptionSchedule update(String id, SubscriptionScheduleUpdateParams params)
      throws StripeException {
    return update(id, params, (RequestOptions) null);
  }

  /** Updates an existing subscription schedule. */
  public SubscriptionSchedule update(
      String id, SubscriptionScheduleUpdateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_schedules/%s", id);
    return request(
        ApiResource.RequestMethod.POST, url, params, SubscriptionSchedule.class, options);
  }

  /**
   * Retrieves the details of an existing subscription schedule. You only need to supply the unique
   * subscription schedule identifier that was returned upon subscription schedule creation.
   */
  public SubscriptionSchedule retrieve(String schedule, SubscriptionScheduleRetrieveParams params)
      throws StripeException {
    return retrieve(schedule, params, (RequestOptions) null);
  }

  /**
   * Retrieves the details of an existing subscription schedule. You only need to supply the unique
   * subscription schedule identifier that was returned upon subscription schedule creation.
   */
  public SubscriptionSchedule retrieve(
      String schedule, SubscriptionScheduleRetrieveParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_schedules/%s", schedule);
    return request(ApiResource.RequestMethod.GET, url, params, SubscriptionSchedule.class, options);
  }

  /** Creates a new subscription schedule object. */
  public SubscriptionSchedule create(SubscriptionScheduleCreateParams params)
      throws StripeException {
    return create(params, (RequestOptions) null);
  }

  /** Creates a new subscription schedule object. */
  public SubscriptionSchedule create(
      SubscriptionScheduleCreateParams params, RequestOptions options) throws StripeException {
    String url = resourceUrl("/v1/subscription_schedules");
    return request(
        ApiResource.RequestMethod.POST, url, params, SubscriptionSchedule.class, options);
  }

  /** Retrieves the list of subscription schedule revisions for a subscription schedule. */
  public SubscriptionScheduleRevisionCollection revisions(
      String id, SubscriptionScheduleRevisionsParams params) throws StripeException {
    return revisions(id, params, (RequestOptions) null);
  }

  /** Retrieves the list of subscription schedule revisions for a subscription schedule. */
  public SubscriptionScheduleRevisionCollection revisions(
      String id, SubscriptionScheduleRevisionsParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_schedules/%s/revisions", id);
    return requestCollection(url, params, SubscriptionScheduleRevisionCollection.class, options);
  }

  /** Retrieves the list of your subscription schedules. */
  public SubscriptionScheduleCollection list(SubscriptionScheduleListParams params)
      throws StripeException {
    return list(params, (RequestOptions) null);
  }

  /** Retrieves the list of your subscription schedules. */
  public SubscriptionScheduleCollection list(
      SubscriptionScheduleListParams params, RequestOptions options) throws StripeException {
    String url = resourceUrl("/v1/subscription_schedules");
    return requestCollection(url, params, SubscriptionScheduleCollection.class, options);
  }
}
