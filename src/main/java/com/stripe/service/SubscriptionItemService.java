// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.service;

import com.stripe.exception.StripeException;
import com.stripe.model.SubscriptionItem;
import com.stripe.model.SubscriptionItemCollection;
import com.stripe.model.UsageRecordSummaryCollection;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.RequestOptions;
import com.stripe.param.SubscriptionItemCreateParams;
import com.stripe.param.SubscriptionItemDeleteParams;
import com.stripe.param.SubscriptionItemListParams;
import com.stripe.param.SubscriptionItemRetrieveParams;
import com.stripe.param.SubscriptionItemUpdateParams;
import com.stripe.param.SubscriptionItemUsageRecordSummariesParams;

public class SubscriptionItemService extends ApiService {
  /**
   * For the specified subscription item, returns a list of summary objects. Each object in the list
   * provides usage information that’s been summarized from multiple usage records and over a
   * subscription billing period (e.g., 15 usage records in the billing plan’s month of September).
   *
   * <p>The list is sorted in reverse-chronological order (newest first). The first list item
   * represents the most current usage period that hasn’t ended yet. Since new usage records can
   * still be added, the returned summary information for the subscription item’s ID should be seen
   * as unstable until the subscription billing period ends.
   */
  public UsageRecordSummaryCollection usageRecordSummaries(
      String id, SubscriptionItemUsageRecordSummariesParams params) throws StripeException {
    return usageRecordSummaries(id, params, (RequestOptions) null);
  }

  /**
   * For the specified subscription item, returns a list of summary objects. Each object in the list
   * provides usage information that’s been summarized from multiple usage records and over a
   * subscription billing period (e.g., 15 usage records in the billing plan’s month of September).
   *
   * <p>The list is sorted in reverse-chronological order (newest first). The first list item
   * represents the most current usage period that hasn’t ended yet. Since new usage records can
   * still be added, the returned summary information for the subscription item’s ID should be seen
   * as unstable until the subscription billing period ends.
   */
  public UsageRecordSummaryCollection usageRecordSummaries(
      String id, SubscriptionItemUsageRecordSummariesParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_items/%s/usage_record_summaries", id);
    return requestCollection(url, params, UsageRecordSummaryCollection.class, options);
  }

  /** Updates the plan or quantity of an item on a current subscription. */
  public SubscriptionItem update(String id, SubscriptionItemUpdateParams params)
      throws StripeException {
    return update(id, params, (RequestOptions) null);
  }

  /** Updates the plan or quantity of an item on a current subscription. */
  public SubscriptionItem update(
      String id, SubscriptionItemUpdateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_items/%s", id);
    return request(ApiResource.RequestMethod.POST, url, params, SubscriptionItem.class, options);
  }

  /** Adds a new item to an existing subscription. No existing items will be changed or replaced. */
  public SubscriptionItem create(SubscriptionItemCreateParams params) throws StripeException {
    return create(params, (RequestOptions) null);
  }

  /** Adds a new item to an existing subscription. No existing items will be changed or replaced. */
  public SubscriptionItem create(SubscriptionItemCreateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_items");
    return request(ApiResource.RequestMethod.POST, url, params, SubscriptionItem.class, options);
  }

  /** Retrieves the invoice item with the given ID. */
  public SubscriptionItem retrieve(String item, SubscriptionItemRetrieveParams params)
      throws StripeException {
    return retrieve(item, params, (RequestOptions) null);
  }

  /** Retrieves the invoice item with the given ID. */
  public SubscriptionItem retrieve(
      String item, SubscriptionItemRetrieveParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_items/%s", item);
    return request(ApiResource.RequestMethod.GET, url, params, SubscriptionItem.class, options);
  }

  /** Returns a list of your subscription items for a given subscription. */
  public SubscriptionItemCollection list(SubscriptionItemListParams params) throws StripeException {
    return list(params, (RequestOptions) null);
  }

  /** Returns a list of your subscription items for a given subscription. */
  public SubscriptionItemCollection list(SubscriptionItemListParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_items");
    return requestCollection(url, params, SubscriptionItemCollection.class, options);
  }

  /**
   * Deletes an item from the subscription. Removing a subscription item from a subscription will
   * not cancel the subscription.
   */
  public SubscriptionItem delete(String id, SubscriptionItemDeleteParams params)
      throws StripeException {
    return delete(id, params, (RequestOptions) null);
  }

  /**
   * Deletes an item from the subscription. Removing a subscription item from a subscription will
   * not cancel the subscription.
   */
  public SubscriptionItem delete(
      String id, SubscriptionItemDeleteParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscription_items/%s", id);
    return request(ApiResource.RequestMethod.DELETE, url, params, SubscriptionItem.class, options);
  }
}
