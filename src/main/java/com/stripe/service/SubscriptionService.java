// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.service;

import com.stripe.exception.StripeException;
import com.stripe.model.Discount;
import com.stripe.model.Subscription;
import com.stripe.model.SubscriptionCollection;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.RequestOptions;
import com.stripe.param.SubscriptionCancelParams;
import com.stripe.param.SubscriptionCreateParams;
import com.stripe.param.SubscriptionDeleteDiscountParams;
import com.stripe.param.SubscriptionListParams;
import com.stripe.param.SubscriptionRetrieveParams;
import com.stripe.param.SubscriptionUpdateParams;

public class SubscriptionService extends ApiService {
  /**
   * Cancels a customer’s subscription immediately. The customer will not be charged again for the
   * subscription.
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for
   * at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve
   * set the subscription to cancel at the end of the period, any pending prorations will also be
   * left in place and collected at the end of the period. But if the subscription is set to cancel
   * immediately, pending prorations will be removed.
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all
   * finalized invoices for the customer. This is intended to prevent unexpected payment attempts
   * after the customer has canceled a subscription. However, you can resume automatic collection of
   * the invoices manually after subscription cancellation to have us proceed. Or, you could check
   * for unpaid invoices before allowing the customer to cancel the subscription at all.
   */
  public Subscription cancel(String id, SubscriptionCancelParams params) throws StripeException {
    return cancel(id, params, (RequestOptions) null);
  }

  /**
   * Cancels a customer’s subscription immediately. The customer will not be charged again for the
   * subscription.
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for
   * at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve
   * set the subscription to cancel at the end of the period, any pending prorations will also be
   * left in place and collected at the end of the period. But if the subscription is set to cancel
   * immediately, pending prorations will be removed.
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all
   * finalized invoices for the customer. This is intended to prevent unexpected payment attempts
   * after the customer has canceled a subscription. However, you can resume automatic collection of
   * the invoices manually after subscription cancellation to have us proceed. Or, you could check
   * for unpaid invoices before allowing the customer to cancel the subscription at all.
   */
  public Subscription cancel(String id, SubscriptionCancelParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscriptions/%s", id);
    return request(ApiResource.RequestMethod.DELETE, url, params, Subscription.class, options);
  }

  /** Retrieves the subscription with the given ID. */
  public Subscription retrieve(String subscriptionExposedId, SubscriptionRetrieveParams params)
      throws StripeException {
    return retrieve(subscriptionExposedId, params, (RequestOptions) null);
  }

  /** Retrieves the subscription with the given ID. */
  public Subscription retrieve(
      String subscriptionExposedId, SubscriptionRetrieveParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscriptions/%s", subscriptionExposedId);
    return request(ApiResource.RequestMethod.GET, url, params, Subscription.class, options);
  }

  /**
   * Updates an existing subscription on a customer to match the specified parameters. When changing
   * plans or quantities, we will optionally prorate the price we charge next month to make up for
   * any price changes. To preview how the proration will be calculated, use the <a
   * href="#upcoming_invoice">upcoming invoice</a> endpoint.
   */
  public Subscription update(String id, SubscriptionUpdateParams params) throws StripeException {
    return update(id, params, (RequestOptions) null);
  }

  /**
   * Updates an existing subscription on a customer to match the specified parameters. When changing
   * plans or quantities, we will optionally prorate the price we charge next month to make up for
   * any price changes. To preview how the proration will be calculated, use the <a
   * href="#upcoming_invoice">upcoming invoice</a> endpoint.
   */
  public Subscription update(String id, SubscriptionUpdateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscriptions/%s", id);
    return request(ApiResource.RequestMethod.POST, url, params, Subscription.class, options);
  }

  /** Creates a new subscription on an existing customer. */
  public Subscription create(SubscriptionCreateParams params) throws StripeException {
    return create(params, (RequestOptions) null);
  }

  /** Creates a new subscription on an existing customer. */
  public Subscription create(SubscriptionCreateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscriptions");
    return request(ApiResource.RequestMethod.POST, url, params, Subscription.class, options);
  }

  /**
   * By default, returns a list of subscriptions that have not been canceled. In order to list
   * canceled subscriptions, specify <code>status=canceled</code>.
   */
  public SubscriptionCollection list(SubscriptionListParams params) throws StripeException {
    return list(params, (RequestOptions) null);
  }

  /**
   * By default, returns a list of subscriptions that have not been canceled. In order to list
   * canceled subscriptions, specify <code>status=canceled</code>.
   */
  public SubscriptionCollection list(SubscriptionListParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscriptions");
    return requestCollection(url, params, SubscriptionCollection.class, options);
  }

  /** Removes the currently applied discount on a subscription. */
  public Discount deleteDiscount(String id, SubscriptionDeleteDiscountParams params)
      throws StripeException {
    return deleteDiscount(id, params, (RequestOptions) null);
  }

  /** Removes the currently applied discount on a subscription. */
  public Discount deleteDiscount(
      String id, SubscriptionDeleteDiscountParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/subscriptions/%s/discount", id);
    return request(ApiResource.RequestMethod.DELETE, url, params, Discount.class, options);
  }
}
