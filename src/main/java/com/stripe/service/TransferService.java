// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.service;

import com.stripe.exception.StripeException;
import com.stripe.model.Transfer;
import com.stripe.model.TransferCollection;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.RequestOptions;
import com.stripe.param.TransferCreateParams;
import com.stripe.param.TransferListParams;
import com.stripe.param.TransferRetrieveParams;
import com.stripe.param.TransferUpdateParams;

public class TransferService extends ApiService {
  /**
   * Updates the specified transfer by setting the values of the parameters passed. Any parameters
   * not provided will be left unchanged.
   *
   * <p>This request accepts only metadata as an argument.
   */
  public Transfer update(String id, TransferUpdateParams params) throws StripeException {
    return update(id, params, (RequestOptions) null);
  }

  /**
   * Updates the specified transfer by setting the values of the parameters passed. Any parameters
   * not provided will be left unchanged.
   *
   * <p>This request accepts only metadata as an argument.
   */
  public Transfer update(String id, TransferUpdateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/transfers/%s", id);
    return request(ApiResource.RequestMethod.POST, url, params, Transfer.class, options);
  }

  /**
   * Retrieves the details of an existing transfer. Supply the unique transfer ID from either a
   * transfer creation request or the transfer list, and Stripe will return the corresponding
   * transfer information.
   */
  public Transfer retrieve(String transfer, TransferRetrieveParams params) throws StripeException {
    return retrieve(transfer, params, (RequestOptions) null);
  }

  /**
   * Retrieves the details of an existing transfer. Supply the unique transfer ID from either a
   * transfer creation request or the transfer list, and Stripe will return the corresponding
   * transfer information.
   */
  public Transfer retrieve(String transfer, TransferRetrieveParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/transfers/%s", transfer);
    return request(ApiResource.RequestMethod.GET, url, params, Transfer.class, options);
  }

  /**
   * To send funds from your Stripe account to a connected account, you create a new transfer
   * object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount,
   * or you’ll receive an “Insufficient Funds” error.
   */
  public Transfer create(TransferCreateParams params) throws StripeException {
    return create(params, (RequestOptions) null);
  }

  /**
   * To send funds from your Stripe account to a connected account, you create a new transfer
   * object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount,
   * or you’ll receive an “Insufficient Funds” error.
   */
  public Transfer create(TransferCreateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/transfers");
    return request(ApiResource.RequestMethod.POST, url, params, Transfer.class, options);
  }

  /**
   * Returns a list of existing transfers sent to connected accounts. The transfers are returned in
   * sorted order, with the most recently created transfers appearing first.
   */
  public TransferCollection list(TransferListParams params) throws StripeException {
    return list(params, (RequestOptions) null);
  }

  /**
   * Returns a list of existing transfers sent to connected accounts. The transfers are returned in
   * sorted order, with the most recently created transfers appearing first.
   */
  public TransferCollection list(TransferListParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/transfers");
    return requestCollection(url, params, TransferCollection.class, options);
  }
}
